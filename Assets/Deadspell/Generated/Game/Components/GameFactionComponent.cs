//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Deadspell.Components.FactionComponent faction { get { return (Deadspell.Components.FactionComponent)GetComponent(GameComponentsLookup.Faction); } }
    public bool hasFaction { get { return HasComponent(GameComponentsLookup.Faction); } }

    public void AddFaction(Deadspell.Data.Faction newFaction) {
        var index = GameComponentsLookup.Faction;
        var component = (Deadspell.Components.FactionComponent)CreateComponent(index, typeof(Deadspell.Components.FactionComponent));
        component.Faction = newFaction;
        AddComponent(index, component);
    }

    public void ReplaceFaction(Deadspell.Data.Faction newFaction) {
        var index = GameComponentsLookup.Faction;
        var component = (Deadspell.Components.FactionComponent)CreateComponent(index, typeof(Deadspell.Components.FactionComponent));
        component.Faction = newFaction;
        ReplaceComponent(index, component);
    }

    public void RemoveFaction() {
        RemoveComponent(GameComponentsLookup.Faction);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherFaction;

    public static Entitas.IMatcher<GameEntity> Faction {
        get {
            if (_matcherFaction == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Faction);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherFaction = matcher;
            }

            return _matcherFaction;
        }
    }
}
